# Cursor Rules для проекта "Камень, Ножницы, Бумага" (RPS)

## ОБЯЗАТЕЛЬНЫЕ ТРЕБОВАНИЯ

### Язык общения и комментариев
- ВСЕ ответы в чате ДОЛЖНЫ быть на русском языке
- ВСЕ комментарии в коде ДОЛЖНЫ быть на русском языке  
- ВСЕ переменные и функции должны использовать осмысленные имена на английском или транслите
- Документация и README должны быть на русском языке

### Архитектура проекта
Проект представляет собой многопользовательскую веб-игру "Камень, Ножницы, Бумага" с следующей архитектурой:

**Frontend:**
- `index.html` - основная страница игры
- `script.js` - логика клиента с управлением состоянием
- `style.css` - адаптивные стили с градиентным дизайном
- `test-room-logic.html` - инструмент для тестирования логики комнат

**Backend:** 
- Supabase (PostgreSQL + Realtime WebSocket)
- Таблица `games` с полями: room_id, player1_id, player2_id, player1_choice, player2_choice, status

**Основные компоненты:**
1. Управление комнатами (создание/присоединение)
2. Real-time синхронизация ходов
3. Валидация входных данных
4. Система состояний игры
5. Автоматическая очистка ресурсов

## СТАНДАРТЫ КОДИРОВАНИЯ

### JavaScript
- Используй async/await вместо промисов
- Обязательная обработка ошибок с try/catch
- Комментарии на русском языке для всех функций
- Валидация всех пользовательских вводов
- Избегай memory leaks - всегда очищай подписки и таймеры

### CSS
- Адаптивный дизайн (mobile-first)
- Используй CSS Grid/Flexbox для раскладки
- Переменные CSS для цветов и размеров
- Плавные анимации (transition 0.3s ease)
- Градиентные фоны для кнопок

### HTML
- Семантическая разметка
- Доступность (ARIA-labels, alt атрибуты)
- Meta теги для SEO
- Валидные атрибуты форм

## ПАТТЕРНЫ РАЗРАБОТКИ

### Управление состоянием
```javascript
// Централизованное состояние игры
const gameState = {
  currentRoom: null,      // ID текущей комнаты
  playerId: null,         // Уникальный ID игрока  
  isPlayer1: false,       // Роль игрока
  channel: null,          // Supabase канал
  myChoice: null,         // Мой выбор
  opponentChoice: null,   // Выбор оппонента
  gameStatus: 'idle'      // Статус: idle|waiting|playing|finished
};
```

### Обработка ошибок
```javascript
try {
  // Основная логика
} catch (error) {
  console.error('Подробное описание ошибки:', error);
  showStatus(`Понятное сообщение для пользователя: ${error.message}`, true);
  // Откат изменений если необходимо
}
```

### Supabase подписки
- Всегда закрывай предыдущие каналы перед созданием новых
- Обрабатывай события UPDATE и DELETE
- Логируй статус подключения для отладки

## ТРЕБОВАНИЯ К ФУНКЦИОНАЛЬНОСТИ

### Создание комнат
- Генерация уникального 4-значного ID
- Проверка существования комнаты в БД
- Максимум 10 попыток генерации ID
- Автоматическое заполнение поля после создания

### Присоединение к комнатам  
- Валидация формата ID (ровно 4 цифры)
- Проверка существования и доступности комнаты
- Защита от race condition при присоединении
- Обработка состояния "комната заполнена"

### Игровая логика
- Блокировка повторных ходов в раунде
- Real-time обновление статуса оппонента
- Автоматический сброс раунда через 4 секунды
- Корректное определение победителя

### UI/UX
- Динамическое изменение текста кнопок
- Блокировка элементов во время загрузки
- Показ статуса игры пользователю
- Адаптивность для мобильных устройств

## ОТЛАДКА И ТЕСТИРОВАНИЕ

### Логирование
- Используй console.log для важных событий
- Включай временные метки в логи
- Логируй ошибки с полным контекстом
- Делай Supabase клиент доступным в window для тестирования

### Тестирование
- Используй `test-room-logic.html` для проверки UI логики
- Тестируй сценарии: создание, присоединение, валидация
- Проверяй корректность очистки ресурсов
- Тестируй на мобильных устройствах

## ОПТИМИЗАЦИЯ

### Производительность
- Минимизируй количество запросов к БД
- Используй debounce для пользовательского ввода
- Очищай неиспользуемые подписки и таймеры
- Кэшируй DOM элементы в переменных

### Безопасность
- Валидируй все входные данные на клиенте
- Используй параметризированные запросы
- Не храни чувствительные данные в localStorage
- Проверяй роли игроков перед обновлениями

## СТРУКТУРА ФАЙЛОВ
```
rps/
├── index.html              # Основная страница
├── script.js               # Главная логика клиента
├── style.css               # Стили с адаптивностью
├── test-room-logic.html    # Тестирование UI логики
├── debug.html              # Отладочные инструменты
├── README.md               # Документация
└── supabase-setup.sql      # Схема БД
```

## ПРИМЕРЫ РЕАЛИЗАЦИИ

### Функция с правильными комментариями:
```javascript
/**
 * Создает новую игровую комнату с уникальным ID
 * Генерирует 4-значный числовой идентификатор
 * @returns {Promise<void>} - Промис создания комнаты
 */
async function createRoom() {
  // Генерируем уникальный ID игрока
  gameState.playerId = generatePlayerId();
  gameState.isPlayer1 = true;
  
  // Пытаемся создать уникальный room_id
  let room_id;
  let attempts = 0;
  const maxAttempts = 10;
  
  while (attempts < maxAttempts) {
    // Создаем ID из 4 случайных цифр
    room_id = Math.floor(1000 + Math.random() * 9000).toString();
    
    // Проверяем уникальность в БД
    // ... остальная логика
  }
}
```

Следуй этим правилам при работе с проектом для обеспечения качества кода и пользовательского опыта. 