// –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabaseUrl = "https://kdbbyqsdmucjvsatbiog.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtkYmJ5cXNkbXVjanZzYXRiaW9nIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0MzQxNzcsImV4cCI6MjA2NjAxMDE3N30.v6wR9s1zCyYL-xN2Rohoi35LJ-f1uA1Y5KPPjQoXhLU";

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–æ—Ç-–∫–æ–º–Ω–∞—Ç—ã
const BOT_ROOM_ID = '9999';
const BOT_PLAYER_ID = 'bot_player_9999';

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const gameState = {
  currentRoom: null,      // ID —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
  playerId: null,         // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞  
  isPlayer1: false,       // –†–æ–ª—å –∏–≥—Ä–æ–∫–∞
  channel: null,          // Supabase –∫–∞–Ω–∞–ª
  myChoice: null,         // –ú–æ–π –≤—ã–±–æ—Ä
  opponentChoice: null,   // –í—ã–±–æ—Ä –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
  gameStatus: 'idle',     // –°—Ç–∞—Ç—É—Å: idle|waiting|playing|finished
  playingWithBot: false   // –ò–≥—Ä–∞–µ–º –ª–∏ –º—ã —Å –±–æ—Ç–æ–º
};

// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Supabase –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
let supabase = null;

// –î–µ–ª–∞–µ–º supabase –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.supabaseClient = null;

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
 */
async function testConnection() {
  if (!supabase) {
    console.error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    showStatus("–û—à–∏–±–∫–∞: Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", true);
    return;
  }

  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const { data, error } = await supabase
      .from('games')
      .select('count', { count: 'exact', head: true });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      showStatus("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", true);
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ');
    console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä:', data);
    
  } catch (error) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    showStatus("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", true);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
window.addEventListener('DOMContentLoaded', () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
  if (typeof window.supabase === 'undefined') {
    console.error('Supabase library not loaded');
    showStatus("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Supabase", true);
    return;
  }

  try {
    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    supabase = window.supabase.createClient(supabaseUrl, supabaseKey, {
      auth: {
        autoRefreshToken: true,
        persistSession: false // –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
      },
      realtime: {
        params: {
          eventsPerSecond: 10
        }
      }
    });

    // –î–µ–ª–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.supabaseClient = supabase;
    
    console.log('Supabase client initialized:', supabase);
    console.log('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è window.supabaseClient –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    showStatus("–ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ! –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞
    const botButton = document.getElementById('botMenuButton');
    if (botButton) {
      console.log('ü§ñ –ö–Ω–æ–ø–∫–∞ –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –≤–∏–¥–Ω–∞:', botButton.style.display !== 'none');
      console.log('ü§ñ –°—Ç–∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞:', window.getComputedStyle(botButton).display);
    } else {
      console.log('ü§ñ –ö–Ω–æ–ø–∫–∞ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ–Ω–∞ –≤ –º–µ–Ω—é');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    testConnection();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç-–∫–æ–º–Ω–∞—Ç—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initializeBotRoom();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
    window.addEventListener('offline', () => {
      showStatus("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.", true);
    });

    window.addEventListener('online', () => {
      showStatus("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
      if (gameState.currentRoom) {
        subscribeToUpdates();
      }
    });
    
  } catch (error) {
    console.error('Error initializing Supabase:', error);
    showStatus("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: " + error.message, true);
  }
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç-–∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É —Å –±–æ—Ç–æ–º, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
 */
async function initializeBotRoom() {
  console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç-–∫–æ–º–Ω–∞—Ç—ã...');
  
  if (!supabase) {
    console.error('Supabase –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç-–∫–æ–º–Ω–∞—Ç—ã');
    return;
  }

  try {
    await ensureBotRoomExists();
    console.log('ü§ñ –ë–æ—Ç-–∫–æ–º–Ω–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('ü§ñ –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç-–∫–æ–º–Ω–∞—Ç—ã:', error);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º
 * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ —Å –±–æ—Ç–æ–º
 */
async function playWithBot() {
  console.log('ü§ñ –§—É–Ω–∫—Ü–∏—è playWithBot –≤—ã–∑–≤–∞–Ω–∞');
  
  if (!supabase) {
    console.error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    showStatus("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", true);
    return;
  }

  console.log('ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É...');
  showLoader(true);
  showStatus("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É...");

  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º
    gameState.playingWithBot = true;
    console.log('ü§ñ –§–ª–∞–≥ playingWithBot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏–≥—Ä–æ–∫–∞
    gameState.playerId = generatePlayerId();
    gameState.isPlayer1 = false; // –ò–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –≤—Ç–æ—Ä–æ–π, –±–æ—Ç - –ø–µ—Ä–≤—ã–π
    console.log('ü§ñ ID –∏–≥—Ä–æ–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', gameState.playerId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É —Å –±–æ—Ç–æ–º
    console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –±–æ—Ç-–∫–æ–º–Ω–∞—Ç—É...');
    await ensureBotRoomExists();
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Å –±–æ—Ç–æ–º
    console.log('ü§ñ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –±–æ—Ç-–∫–æ–º–Ω–∞—Ç–µ...');
    const { data: updatedGame, error: updateError } = await retryWrapper(() =>
      supabase
        .from("games")
        .update({ 
          player2_id: gameState.playerId,
          status: 'ready',
          updated_at: new Date().toISOString()
        })
        .eq("room_id", BOT_ROOM_ID)
        .select()
        .single()
    );

    if (updateError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –±–æ—Ç-–∫–æ–º–Ω–∞—Ç–µ:', updateError);
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: ${updateError.message}`);
    }

    console.log('ü§ñ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –±–æ—Ç-–∫–æ–º–Ω–∞—Ç–µ:', updatedGame);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gameState.currentRoom = BOT_ROOM_ID;
    gameState.gameStatus = 'ready';

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    const roomInput = document.getElementById("room");
    if (roomInput) {
      roomInput.value = BOT_ROOM_ID;
    }

    console.log('ü§ñ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π UI...');
    showGameUI();
    showStatus("–ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–æ—Ç—É! –°–¥–µ–ª–∞–π—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä:");
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä—ã
    toggleChoiceButtons(true);
    
    console.log('ü§ñ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
    subscribeToUpdates();

    // –ë–æ—Ç –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ö–æ–¥ —Å—Ä–∞–∑—É
    console.log('ü§ñ –ë–æ—Ç –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ö–æ–¥...');
    await makeBotMove();

    console.log('ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('ü§ñ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É:', error);
    showStatus(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: ${error.message}`, true);
    gameState.playingWithBot = false;
  } finally {
    showLoader(false);
  }
}

/**
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å –±–æ—Ç–æ–º
 */
async function ensureBotRoomExists() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å –±–æ—Ç–æ–º
    const { data: existingRoom, error: selectError } = await retryWrapper(() =>
      supabase
        .from("games")
        .select("*")
        .eq("room_id", BOT_ROOM_ID)
        .single()
    );

    if (selectError && selectError.code !== 'PGRST116') {
      throw selectError;
    }

    if (!existingRoom) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É —Å –±–æ—Ç–æ–º
      const gameData = {
        room_id: BOT_ROOM_ID,
        player1_id: BOT_PLAYER_ID,
        player2_id: null,
        player1_choice: null,
        player2_choice: null,
        status: 'waiting_player2',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { data, error } = await retryWrapper(() =>
        supabase
          .from("games")
          .insert([gameData])
          .select()
          .single()
      );

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç-–∫–æ–º–Ω–∞—Ç—ã: ${error.message}`);
      }

      console.log('–ë–æ—Ç-–∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', data);
    } else {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
      const { error: resetError } = await retryWrapper(() =>
        supabase
          .from("games")
          .update({
            player2_id: null,
            player1_choice: null,
            player2_choice: null,
            status: 'waiting_player2',
            updated_at: new Date().toISOString()
          })
          .eq("room_id", BOT_ROOM_ID)
      );

      if (resetError) {
        console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–æ—Ç-–∫–æ–º–Ω–∞—Ç—ã:', resetError);
      } else {
        console.log('–ë–æ—Ç-–∫–æ–º–Ω–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã');
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –±–æ—Ç-–∫–æ–º–Ω–∞—Ç—ã:', error);
    throw error;
  }
}

/**
 * –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ö–æ–¥–æ–≤
 * –ë–æ—Ç –¥–µ–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
 */
async function makeBotMove() {
  if (!gameState.playingWithBot || gameState.currentRoom !== BOT_ROOM_ID) {
    return;
  }

  const choices = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'];
  const botChoice = choices[Math.floor(Math.random() * choices.length)];

  try {
    const { error } = await retryWrapper(() =>
      supabase
        .from("games")
        .update({
          player1_choice: botChoice,
          status: 'playing',
          updated_at: new Date().toISOString()
        })
        .eq("room_id", BOT_ROOM_ID)
    );

    if (error) {
      console.error('–û—à–∏–±–∫–∞ —Ö–æ–¥–∞ –±–æ—Ç–∞:', error);
    } else {
      console.log('–ë–æ—Ç —Å–¥–µ–ª–∞–ª —Ö–æ–¥:', botChoice);
    }
  } catch (error) {
    console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ö–æ–¥–µ –±–æ—Ç–∞:', error);
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
function showGameUI() {
  const choices = document.getElementById("choices");
  const roomInput = document.getElementById("room");
  const actionButton = document.getElementById("actionButton");

  if (choices) choices.style.display = "block";
  if (roomInput) roomInput.disabled = true;
  if (actionButton) {
    actionButton.style.display = "block";
    actionButton.textContent = "–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É";
    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    actionButton.onclick = null;
    actionButton.onclick = () => fullCleanup();
  }

  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –∏–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ 2)
  if (gameState.gameStatus === 'ready') {
    toggleChoiceButtons(true);
  } else {
    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
    toggleChoiceButtons(false);
  }
}

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
function toggleChoiceButtons(enabled) {
  const buttons = document.querySelectorAll(".choice-btn");
  buttons.forEach(button => {
    button.disabled = !enabled;
    button.style.opacity = enabled ? "1" : "0.5";
  });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ö–æ–¥–∞
async function makeMove(choice) {
  if (!gameState.currentRoom || !supabase) return;

  if (gameState.myChoice) {
    showStatus("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!", true);
    return;
  }

  if (gameState.gameStatus !== 'ready' && gameState.gameStatus !== 'playing') {
    showStatus("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞!", true);
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ª–æ–∫–∞–ª—å–Ω–æ
  gameState.myChoice = choice;
  toggleChoiceButtons(false);
  showStatus(`–í–∞—à –≤—ã–±–æ—Ä: ${choice}. –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞...`);

  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –æ–±–Ω–æ–≤–ª—è—Ç—å
    const updateData = {
      updated_at: new Date().toISOString()
    };

    if (gameState.isPlayer1) {
      updateData.player1_choice = choice;
    } else {
      updateData.player2_choice = choice;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –≤ —Ä–∞—É–Ω–¥–µ, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ playing
    if (gameState.gameStatus === 'ready') {
      updateData.status = 'playing';
      gameState.gameStatus = 'playing';
    }

    const { error } = await retryWrapper(() =>
      supabase
        .from("games")
        .update(updateData)
        .eq("room_id", gameState.currentRoom)
    );

    if (error) {
      throw error;
    }

    console.log('Move sent successfully:', choice);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ö–æ–¥–∞:", error);
    showStatus(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ö–æ–¥–∞: ${error.message}`, true);
    
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    gameState.myChoice = null;
    toggleChoiceButtons(true);
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
function determineWinner(player1Choice, player2Choice) {
  if (player1Choice === player2Choice) {
    return { winner: 'draw', message: 'ü§ù –ù–∏—á—å—è! –û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞!' };
  }
  
  const rules = { 
    '–∫–∞–º–µ–Ω—å': '–Ω–æ–∂–Ω–∏—Ü—ã', 
    '–Ω–æ–∂–Ω–∏—Ü—ã': '–±—É–º–∞–≥–∞', 
    '–±—É–º–∞–≥–∞': '–∫–∞–º–µ–Ω—å' 
  };
  
  const player1Wins = rules[player1Choice] === player2Choice;
  
  if (gameState.isPlayer1) {
    return {
      winner: player1Wins ? 'me' : 'opponent',
      message: player1Wins ? 'üèÜ –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω! ü•á' : 'üòä –•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è! üåü'
    };
  } else {
    return {
      winner: player1Wins ? 'opponent' : 'me',
      message: player1Wins ? 'üòä –•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è! üåü' : 'üèÜ –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω! ü•á'
    };
  }
}

// –°–±—Ä–æ—Å —Ä–∞—É–Ω–¥–∞
async function resetRound() {
  if (!gameState.currentRoom || !supabase) return;

  try {
    const { error } = await retryWrapper(() =>
      supabase
        .from("games")
        .update({ 
          player1_choice: null, 
          player2_choice: null, 
          status: 'ready',
          updated_at: new Date().toISOString()
        })
        .eq("room_id", gameState.currentRoom)
    );

    if (error) {
      throw error;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gameState.myChoice = null;
    gameState.opponentChoice = null;
    gameState.gameStatus = 'ready';
    
    toggleChoiceButtons(true);
    showStatus("–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥! –°–¥–µ–ª–∞–π—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä:");

    console.log('Round reset successfully');

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–∞—É–Ω–¥–∞:", error);
    showStatus(`–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–∞—É–Ω–¥–∞: ${error.message}`, true);
  }
}

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function subscribeToUpdates() {
  if (!supabase || !gameState.currentRoom) return;

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  cleanup();

  console.log('Subscribing to updates for room:', gameState.currentRoom);

  gameState.channel = supabase
    .channel(`game-room-${gameState.currentRoom}`)
    .on(
      'postgres_changes',
      {
        event: 'UPDATE',
        schema: 'public',
        table: 'games',
        filter: `room_id=eq.${gameState.currentRoom}`
      },
      (payload) => {
        console.log('Received update:', payload);
        handleGameUpdate(payload.new);
      }
    )
    .on(
      'postgres_changes',
      {
        event: 'DELETE',
        schema: 'public',
        table: 'games',
        filter: `room_id=eq.${gameState.currentRoom}`
      },
      () => {
        showStatus("–ò–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", true);
        cleanup();
      }
    )
    .subscribe((status) => {
      console.log('Subscription status:', status);
      if (status === 'SUBSCRIBED') {
        console.log('Successfully subscribed to game updates');
      } else if (status === 'CHANNEL_ERROR') {
        showStatus("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.", true);
      }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–≥—Ä—ã
function handleGameUpdate(gameData) {
  const { player1_choice, player2_choice, status, player2_id } = gameData;

  console.log('Handling game update:', gameData);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
  if (status === 'ready' && player2_id) {
    console.log('üöÄ –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å:', gameState.gameStatus);
    if (gameState.gameStatus === 'waiting' || gameState.gameStatus === 'waiting_player2') {
      if (gameState.playingWithBot) {
        showStatus("–ë–æ—Ç –≥–æ—Ç–æ–≤! –°–¥–µ–ª–∞–π—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä:");
      } else {
        showStatus("–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –°–¥–µ–ª–∞–π—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä:");
      }
    }
    gameState.gameStatus = 'ready';
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞
    toggleChoiceButtons(true);
    console.log('‚úÖ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞! –ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã. –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', gameState.gameStatus);
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–æ–¥—ã
  if (player1_choice || player2_choice) {
    const myChoice = gameState.isPlayer1 ? player1_choice : player2_choice;
    const opponentChoice = gameState.isPlayer1 ? player2_choice : player1_choice;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (myChoice && !gameState.myChoice) {
      gameState.myChoice = myChoice;
    }
    if (opponentChoice && !gameState.opponentChoice) {
      gameState.opponentChoice = opponentChoice;
      if (gameState.playingWithBot) {
        showStatus("–ë–æ—Ç —Å–¥–µ–ª–∞–ª —Ö–æ–¥. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...");
      } else {
        showStatus("–û–ø–ø–æ–Ω–µ–Ω—Ç —Å–¥–µ–ª–∞–ª —Ö–æ–¥. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...");
      }
    }

    // –ï—Å–ª–∏ –æ–±–∞ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (player1_choice && player2_choice) {
      const result = determineWinner(player1_choice, player2_choice);
      const myChoiceDisplay = gameState.isPlayer1 ? player1_choice : player2_choice;
      const opponentChoiceDisplay = gameState.isPlayer1 ? player2_choice : player1_choice;
      
      const opponentName = gameState.playingWithBot ? "–ë–æ—Ç" : "–û–ø–ø–æ–Ω–µ–Ω—Ç";
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ä–∞–∑–ª–∏—á–∏–µ–º –∏ –≤—ã–±–æ—Ä–æ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
      showGameResult(result, myChoiceDisplay, opponentChoiceDisplay, opponentName);
      
      gameState.gameStatus = 'finished';
      toggleChoiceButtons(false);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        resetRound();
      }, 4000);
    }
  }

  // –ï—Å–ª–∏ –∏–≥—Ä–∞–µ–º —Å –±–æ—Ç–æ–º –∏ –∏–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª —Ö–æ–¥, –∑–∞–ø—É—Å–∫–∞–µ–º —Ö–æ–¥ –±–æ—Ç–∞
  if (gameState.playingWithBot && player2_choice && !player1_choice) {
    makeBotMove();
  }
}

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –ë–î –ø–æ—Å–ª–µ –∏–≥—Ä—ã
async function deleteRoomFromDB() {
  if (!gameState.currentRoom || !supabase) {
    return;
  }

  try {
    const { error } = await retryWrapper(() =>
      supabase
        .from("games")
        .delete()
        .eq("room_id", gameState.currentRoom)
    );

    if (error) {
      console.error('Error deleting room:', error);
    } else {
      console.log(`Room ${gameState.currentRoom} deleted from database`);
    }
  } catch (error) {
    console.error('Exception deleting room:', error);
  }
}

function cleanup() {
  if (gameState.channel) {
    supabase.removeChannel(gameState.channel);
    gameState.channel = null;
  }
}

// –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
async function fullCleanup() {
  // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –∏–∑ –ë–î –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–æ –Ω–µ –±–æ—Ç-–∫–æ–º–Ω–∞—Ç—É)
  if (gameState.currentRoom && gameState.currentRoom !== BOT_ROOM_ID) {
    await deleteRoomFromDB();
  } else if (gameState.playingWithBot && gameState.currentRoom === BOT_ROOM_ID) {
    // –î–ª—è –±–æ—Ç-–∫–æ–º–Ω–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º player2
    try {
      await retryWrapper(() =>
        supabase
          .from("games")
          .update({
            player2_id: null,
            player1_choice: null,
            player2_choice: null,
            status: 'waiting_player2',
            updated_at: new Date().toISOString()
          })
          .eq("room_id", BOT_ROOM_ID)
      );
      console.log('–ë–æ—Ç-–∫–æ–º–Ω–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–æ—Ç-–∫–æ–º–Ω–∞—Ç—ã:', error);
    }
  }
  
  cleanup();
  
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  gameState.currentRoom = null;
  gameState.playerId = null;
  gameState.isPlayer1 = false;
  gameState.myChoice = null;
  gameState.opponentChoice = null;
  gameState.gameStatus = 'idle';
  gameState.playingWithBot = false;

  // –°–±—Ä–æ—Å UI
  const choices = document.getElementById("choices");
  const roomInput = document.getElementById("room");
  const actionButton = document.getElementById("actionButton");

  if (choices) choices.style.display = "none";
  if (roomInput) {
    roomInput.disabled = false;
    roomInput.value = "";
  }
  if (actionButton) {
    actionButton.style.display = "block";
    actionButton.textContent = "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É";
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    actionButton.onclick = null;
    actionButton.onclick = handleAction;
  }

  toggleChoiceButtons(false);
  
  const statusMessage = gameState.playingWithBot ? 
    "–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞." : 
    "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.";
  showStatus(statusMessage);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', (event) => {
  if (gameState.currentRoom) {
    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    deleteRoomFromDB();
    cleanup();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('visibilitychange', () => {
  if (document.hidden && gameState.currentRoom) {
    console.log("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞");
  } else if (!document.hidden && gameState.currentRoom) {
    console.log("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞");
  }
});

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å exponential backoff
 * @param {Function} asyncFn - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {number} maxRetries - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
 * @returns {Promise} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
 */
async function retryWrapper(asyncFn, maxRetries = 3) {
  let lastError;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await asyncFn();
    } catch (error) {
      lastError = error;
      console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
      if (attempt < maxRetries) {
        const delay = Math.pow(2, attempt) * 1000; // 1s, 2s, 4s
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  throw lastError;
}

// === PWA –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ ===

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è PWA —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
function initializePWAFeatures() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA —Ñ—É–Ω–∫—Ü–∏–π');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤ PWA —Ä–µ–∂–∏–º–µ
  if (isPWAMode()) {
    console.log('üîß –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ PWA —Ä–µ–∂–∏–º–µ');
    hidePWAFeatures();
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  setupInstallButton();
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  watchForPWAMode();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ PWA —Ä–µ–∂–∏–º–∞ (–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è)
function isPWAMode() {
  const displayMode = getPWADisplayMode();
  return displayMode === 'pwa' || 
         window.navigator.standalone === true ||
         document.referrer.includes('android-app://');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function getPWADisplayMode() {
  if (window.matchMedia('(display-mode: standalone)').matches) {
    return 'pwa';
  }
  if (window.matchMedia('(display-mode: minimal-ui)').matches) {
    return 'minimal-ui';
  }
  if (window.matchMedia('(display-mode: fullscreen)').matches) {
    return 'fullscreen';
  }
  return 'browser';
}

// –°–∫—Ä—ã—Ç–∏–µ PWA —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
function hidePWAFeatures() {
  const installBtn = document.getElementById('install-btn');
  const pwaFeatures = document.querySelector('.pwa-features');
  
  if (installBtn) {
    installBtn.style.display = 'none';
  }
  
  if (pwaFeatures) {
    pwaFeatures.innerHTML = `
      <p class="features-text">
        üéâ <strong>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</strong>
        ‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
      </p>
    `;
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
function setupInstallButton() {
  const installBtn = document.getElementById('install-btn');
  if (!installBtn) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
  if (shouldShowInstallButton()) {
    // –î–ª—è iOS –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
    if (isIOSDevice() && !isPWAMode()) {
      showIOSInstallInstructions();
    }
    
    // –î–ª—è Android –∂–¥–µ–º —Å–æ–±—ã—Ç–∏–µ beforeinstallprompt (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ HTML)
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
function shouldShowInstallButton() {
  return isMobileDevice() && 
         !isPWAMode() && 
         !localStorage.getItem('pwa-install-dismissed');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function isIOSDevice() {
  return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
}

// –ü–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è iOS
function showIOSInstallInstructions() {
  const installBtn = document.getElementById('install-btn');
  if (!installBtn) return;
  
  installBtn.style.display = 'block';
  installBtn.onclick = () => {
    showIOSInstallModal();
  };
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è iOS
function showIOSInstallModal() {
  const modal = document.createElement('div');
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    padding: 20px;
    box-sizing: border-box;
  `;
  
  modal.innerHTML = `
    <div style="
      background: white;
      border-radius: 20px;
      padding: 30px;
      max-width: 350px;
      text-align: center;
      box-shadow: 0 20px 40px rgba(0,0,0,0.3);
    ">
      <h3 style="margin: 0 0 20px 0; color: #333;">üì± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h3>
      <div style="text-align: left; margin: 20px 0; line-height: 1.6; color: #666;">
        <p style="margin: 10px 0;"><strong>1.</strong> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" (üì§) –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞</p>
        <p style="margin: 10px 0;"><strong>2.</strong> –í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞ —ç–∫—Ä–∞–Ω –î–æ–º–æ–π" –∏–ª–∏ "Add to Home Screen"</p>
        <p style="margin: 10px 0;"><strong>3.</strong> –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å"</p>
        <p style="margin: 20px 0 0 0; text-align: center; color: #28a745; font-weight: bold;">
          üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ!
        </p>
      </div>
      <button onclick="this.parentElement.parentElement.remove()" style="
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        margin-top: 10px;
      ">–ü–æ–Ω—è—Ç–Ω–æ</button>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  modal.onclick = (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  };
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π PWA —Ä–µ–∂–∏–º–∞
function watchForPWAMode() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–≤
  const mediaQuery = window.matchMedia('(display-mode: standalone)');
  mediaQuery.addEventListener('change', (e) => {
    if (e.matches) {
      console.log('üéâ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ PWA —Ä–µ–∂–∏–º');
      hidePWAFeatures();
    }
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
function isMobileDevice() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ User Agent
  const userAgent = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  const touchScreen = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  const smallScreen = window.innerWidth <= 768;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ iPad —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ desktop)
  const iPadPro = navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && /MacIntel/.test(navigator.platform);
  
  return userAgent || (touchScreen && smallScreen) || iPadPro;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
  setTimeout(initializePWAFeatures, 100);
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', () => {
  console.log('üìã PWA —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:');
  console.log('- –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', isMobileDevice());
  console.log('- PWA —Ä–µ–∂–∏–º:', isPWAMode());
  console.log('- –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', getPWADisplayMode());
  console.log('- iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', isIOSDevice());
});

// –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
function showStatus(message, isError = false) {
  const result = document.getElementById('result');
  if (!result) return;
  
  if (isError) {
    // –î–µ–ª–∞–µ–º –æ—à–∏–±–∫–∏ –º–µ–Ω–µ–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏
    result.innerHTML = `<div class="status-message error-message">
      <span>üòÖ ${message}</span>
      <br><small>–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! üí™</small>
    </div>`;
    result.className = 'result error';
  } else {
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ç–∏–≤–∞ –≤ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    let positiveMessage = message;
    
    // –î–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º–∏
    if (message.includes('–ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ')) {
      positiveMessage = 'üéâ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –î–∞–≤–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –≤–µ—Å–µ–ª–∏—Ç—å—Å—è! üéÆ';
    } else if (message.includes('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É')) {
      positiveMessage = 'ü§ñ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º—É –±–æ—Ç—É... ‚ö°';
    } else if (message.includes('–ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–æ—Ç—É')) {
      positiveMessage = 'ü§ñ‚ú® –û—Ç–ª–∏—á–Ω–æ! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ! –ü–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏! üéØ';
    } else if (message.includes('–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è')) {
      positiveMessage = 'üéä –£—Ä–∞! –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –ü–æ—Ä–∞ –∏–≥—Ä–∞—Ç—å! üé™';
    } else if (message.includes('–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥')) {
      positiveMessage = 'üöÄ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥! –í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã! ‚≠ê';
    } else if (message.includes('–í—ã –ø–æ–±–µ–¥–∏–ª–∏')) {
      positiveMessage = 'üèÜ –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω! ü•á';
    } else if (message.includes('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏')) {
      positiveMessage = 'üòä –•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è! üåü';
    } else if (message.includes('–ù–∏—á—å—è')) {
      positiveMessage = 'ü§ù –ù–∏—á—å—è! –û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞! –í—ã –æ–±–∞ –º–æ–ª–æ–¥—Ü—ã! üëè';
    } else if (message.includes('–û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞')) {
      positiveMessage = message.replace('–û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞', '‚è≥ –û–∂–∏–¥–∞–µ–º —Ö–æ–¥–∞');
    } else if (message.includes('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')) {
      positiveMessage = 'üåê‚ú® –û—Ç–ª–∏—á–Ω–æ! –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É! üéÆ';
    }
    
    result.innerHTML = `<div class="status-message success-message">
      <span>${positiveMessage}</span>
    </div>`;
    result.className = 'result success';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
  result.style.animation = 'none';
  result.offsetHeight; // Trigger reflow
  result.style.animation = 'resultPulse 0.5s ease-in-out';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–≤–æ–¥–∞
function updateButton() {
  const roomInput = document.getElementById('room');
  const actionButton = document.getElementById('actionButton');
  
  if (!roomInput || !actionButton) return;
  
  const roomValue = roomInput.value.trim();
  
  if (roomValue === '') {
    actionButton.textContent = 'üöÄ –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É';
    actionButton.className = 'action-btn';
  } else if (roomValue.length === 4 && /^\d{4}$/.test(roomValue)) {
    actionButton.textContent = 'üéØ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
    actionButton.className = 'action-btn';
  } else {
    actionButton.textContent = '‚ú® –í–≤–µ–¥–∏—Ç–µ 4 —Ü–∏—Ñ—Ä—ã';
    actionButton.className = 'action-btn';
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–æ–π
async function handleAction() {
  const roomInput = document.getElementById('room');
  const actionButton = document.getElementById('actionButton');
  
  if (!roomInput || !actionButton) return;
  
  const roomValue = roomInput.value.trim();
  
  if (roomValue === '') {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
    await createRoom();
  } else if (roomValue.length === 4 && /^\d{4}$/.test(roomValue)) {
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ
    await joinRoom(roomValue);
  } else {
    showStatus('‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ 4 —Ü–∏—Ñ—Ä! üéØ', true);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
async function createRoom() {
  if (!supabase) {
    showStatus('üòÖ –°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É! ‚è∞', true);
    return;
  }
  
  showStatus('üé® –°–æ–∑–¥–∞—ë–º –≤–∞—à—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–Ω–∞—Ç—É... ‚ú®');
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏–≥—Ä–æ–∫–∞
    gameState.playerId = generatePlayerId();
    gameState.isPlayer1 = true;
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π room_id
    let room_id;
    let attempts = 0;
    const maxAttempts = 10;
    
    while (attempts < maxAttempts) {
      room_id = Math.floor(1000 + Math.random() * 9000).toString();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
      const { data: existingRoom } = await supabase
        .from('games')
        .select('room_id')
        .eq('room_id', room_id)
        .single();
      
      if (!existingRoom) {
        break; // –ö–æ–º–Ω–∞—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞
      }
      
      attempts++;
    }
    
    if (attempts >= maxAttempts) {
      showStatus('üòÖ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–º–Ω–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üé≤', true);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
    const gameData = {
      room_id: room_id,
      player1_id: gameState.playerId,
      player2_id: null,
      player1_choice: null,
      player2_choice: null,
      status: 'waiting_player2',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    const { data, error } = await supabase
      .from('games')
      .insert([gameData])
      .select()
      .single();
    
    if (error) {
      throw error;
    }
    
    // –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É
    gameState.currentRoom = room_id;
    gameState.gameStatus = 'waiting_player2';
    
    const roomInput = document.getElementById('room');
    if (roomInput) {
      roomInput.value = room_id;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫–æ–º–Ω–∞—Ç—ã
    showGameUI();
    showStatus(`üéâ –í–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: ${room_id} üéä –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...`);
    console.log('üè† –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –°—Ç–∞—Ç—É—Å:', gameState.gameStatus);
    subscribeToUpdates();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
    showStatus('üòÖ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üîÑ', true);
  }
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
async function joinRoom(roomId) {
  if (!supabase) {
    showStatus('üòÖ –°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É! ‚è∞', true);
    return;
  }
  
  showStatus('üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∏–≥—Ä–µ... ‚ú®');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    const { data: room, error: selectError } = await supabase
      .from('games')
      .select('*')
      .eq('room_id', roomId)
      .single();
    
    if (selectError) {
      showStatus('üòÖ –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID! üîç', true);
      return;
    }
    
    if (room.player2_id) {
      showStatus('üòÖ –ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é! üé™', true);
      return;
    }
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    gameState.playerId = generatePlayerId();
    gameState.isPlayer1 = false;
    
    const { data, error } = await supabase
      .from('games')
      .update({
        player2_id: gameState.playerId,
        status: 'ready',
        updated_at: new Date().toISOString()
      })
      .eq('room_id', roomId)
      .select()
      .single();
    
    if (error) {
      throw error;
    }
    
    // –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å
    gameState.currentRoom = roomId;
    gameState.gameStatus = 'ready';
    
    showGameUI();
    showStatus('üéä –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –£–¥–∞—á–∏! üçÄ');
    subscribeToUpdates();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    showStatus('üòÖ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üîÑ', true);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∏–≥—Ä–æ–∫–∞
function generatePlayerId() {
  return 'player_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoader(show) {
  const actionButton = document.getElementById('actionButton');
  if (actionButton) {
    actionButton.disabled = show;
    if (show) {
      actionButton.textContent = '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º...';
    }
  }
}

/**
 * –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
 * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
 */
async function exitGame() {
  console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã...');
  
  try {
    // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await fullCleanup();
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    gameState.currentRoom = null;
    gameState.playerId = null;
    gameState.isPlayer1 = false;
    gameState.myChoice = null;
    gameState.opponentChoice = null;
    gameState.gameStatus = 'idle';
    gameState.playingWithBot = false;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const choices = document.getElementById('choices');
    const result = document.getElementById('result');
    const roomInput = document.getElementById('room');
    const actionButton = document.getElementById('actionButton');
    
    if (choices) choices.style.display = 'none';
    if (result) {
      result.innerHTML = '';
      result.className = 'result';
    }
    if (roomInput) {
      roomInput.value = '';
      roomInput.disabled = false;
    }
    if (actionButton) {
      actionButton.textContent = 'üöÄ –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É';
      actionButton.disabled = false;
    }
    
    showStatus("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.");
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã:', error);
    showStatus("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã", true);
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ä–∞–∑–ª–∏—á–∏–µ–º –∏ –≤—ã–±–æ—Ä–æ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
 * @param {Object} result - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –æ—Ç determineWinner
 * @param {string} myChoice - –º–æ–π –≤—ã–±–æ—Ä
 * @param {string} opponentChoice - –≤—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
 * @param {string} opponentName - –∏–º—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ (–ë–æ—Ç/–û–ø–ø–æ–Ω–µ–Ω—Ç)
 */
function showGameResult(result, myChoice, opponentChoice, opponentName) {
  const resultElement = document.getElementById('result');
  if (!resultElement) return;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–æ–≤
  const choiceIcons = {
    '–∫–∞–º–µ–Ω—å': 'ü™®',
    '–Ω–æ–∂–Ω–∏—Ü—ã': '‚úÇÔ∏è',
    '–±—É–º–∞–≥–∞': 'üìÑ'
  };
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ä–∞–∑–ª–∏—á–∏—è
  let resultClass = 'result';
  if (result.winner === 'me') {
    resultClass += ' win';
  } else if (result.winner === 'draw') {
    resultClass += ' draw';
  } else {
    resultClass += ' lose';
  }
  
  // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const resultHTML = `
    <div class="status-message">
      <div style="font-size: 1.2rem; margin-bottom: 1rem;">
        ${result.message}
      </div>
      <div class="choices-display">
        <div class="player-choice">
          <span class="choice-icon">${choiceIcons[myChoice]}</span>
          <div class="choice-label">–í—ã: ${myChoice}</div>
        </div>
        <div class="player-choice">
          <span class="choice-icon">${choiceIcons[opponentChoice]}</span>
          <div class="choice-label">${opponentName}: ${opponentChoice}</div>
        </div>
      </div>
    </div>
  `;
  
  resultElement.innerHTML = resultHTML;
  resultElement.className = resultClass;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
  resultElement.style.animation = 'none';
  resultElement.offsetHeight; // Trigger reflow
  resultElement.style.animation = 'resultPulse 0.5s ease-in-out';
}
