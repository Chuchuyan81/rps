// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const { createClient } = supabase;
const supabaseClient = createClient(
  "https://kdbbyqsdmucjvsatbiog.supabase.co", 
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtkYmJ5cXNkbXVjanZzYXRiaW9nIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0MzQxNzcsImV4cCI6MjA2NjAxMDE3N30.v6wR9s1zCyYL-xN2Rohoi35LJ-f1uA1Y5KPPjQoXhLU"
);

let currentRoom = null;
let isPlayer1 = false;
let gameInProgress = false;
let choicesMade = false;
let channel = null;

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
function showStatus(message, isError = false) {
  const resultEl = document.getElementById("result");
  resultEl.innerText = message;
  resultEl.style.color = isError ? "red" : "black";
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä
function showLoader(show = true) {
  const actionButton = document.getElementById("actionButton");
  if (show) {
    actionButton.disabled = true;
    actionButton.textContent = "–ó–∞–≥—Ä—É–∑–∫–∞...";
  } else {
    actionButton.disabled = false;
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è room_id
function validateRoomId(roomId) {
  const trimmed = roomId.trim();
  if (trimmed.length === 0) return { valid: false, message: "ID –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
  if (trimmed.length > 20) return { valid: false, message: "ID –∫–æ–º–Ω–∞—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π" };
  if (!/^[a-zA-Z0-9]+$/.test(trimmed)) return { valid: false, message: "ID –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã" };
  return { valid: true, roomId: trimmed };
}

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
function updateButton() {
  const roomInput = document.getElementById("room");
  const actionButton = document.getElementById("actionButton");

  if (roomInput.value.trim() === "") {
    actionButton.textContent = "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É";
  } else {
    actionButton.textContent = "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è";
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async function handleAction() {
  const roomInput = document.getElementById("room");
  const actionButton = document.getElementById("actionButton");
  const room_id = roomInput.value.trim();

  showLoader(true);
  showStatus("");

  try {
    if (actionButton.textContent === "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É") {
      await createRoom();
    } else {
      const validation = validateRoomId(room_id);
      if (!validation.valid) {
        showStatus(validation.message, true);
        return;
      }
      await joinRoom(validation.roomId);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error);
    showStatus("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.", true);
  } finally {
    showLoader(false);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
async function createRoom() {
  let room_id;
  let attempts = 0;
  const maxAttempts = 5;

  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π room_id —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  while (attempts < maxAttempts) {
    room_id = Math.random().toString(36).substr(2, 8);
    
    const { data: existingRoom } = await supabaseClient
      .from("games")
      .select("room_id")
      .eq("room_id", room_id)
      .single();

    if (!existingRoom) break;
    attempts++;
  }

  if (attempts >= maxAttempts) {
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–æ–º–Ω–∞—Ç—ã");
  }

  const roomInput = document.getElementById("room");
  roomInput.value = room_id;

  const { error } = await supabaseClient.from("games").insert([
    {
      room_id,
      status: "waiting",
      player1_choice: null,
      player2_choice: null,
      player_count: 1
    }
  ]);

  if (error) {
    throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ${error.message}`);
  }

  currentRoom = room_id;
  isPlayer1 = true;
  showGameUI();
  showStatus("–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...");
  subscribeToUpdates();
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
async function joinRoom(room_id) {
  const { data, error } = await supabaseClient
    .from("games")
    .select("*")
    .eq("room_id", room_id)
    .single();

  if (error || !data) {
    throw new Error("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
  }

  if (data.player_count >= 2) {
    throw new Error("–ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!");
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
  const { error: updateError } = await supabaseClient
    .from("games")
    .update({ player_count: 2, status: "ready" })
    .eq("room_id", room_id);

  if (updateError) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${updateError.message}`);
  }

  currentRoom = room_id;
  isPlayer1 = false;
  showGameUI();
  showStatus("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ! –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!");
  subscribeToUpdates();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
function showGameUI() {
  const choices = document.getElementById("choices");
  choices.style.display = "block";
  document.getElementById("room").disabled = true;
  document.getElementById("actionButton").style.display = "none";
}

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
function toggleChoiceButtons(enabled) {
  const buttons = document.querySelectorAll(".choices button");
  buttons.forEach(button => {
    button.disabled = !enabled;
    button.style.opacity = enabled ? "1" : "0.5";
  });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ö–æ–¥–∞
async function makeMove(choice) {
  if (!currentRoom || choicesMade) return;

  choicesMade = true;
  toggleChoiceButtons(false);
  showStatus("–í–∞—à —Ö–æ–¥ —Å–¥–µ–ª–∞–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞...");

  try {
    const { data, error } = await supabaseClient
      .from("games")
      .select("player1_choice,player2_choice,status")
      .eq("room_id", currentRoom)
      .single();

    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
    const canMakeMove = isPlayer1 ? !data.player1_choice : !data.player2_choice;
    
    if (!canMakeMove) {
      showStatus("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!", true);
      return;
    }

    const updateData = {};
    if (isPlayer1) {
      updateData.player1_choice = choice;
    } else {
      updateData.player2_choice = choice;
    }

    const { error: updateError } = await supabaseClient
      .from("games")
      .update(updateData)
      .eq("room_id", currentRoom);

    if (updateError) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ö–æ–¥–∞: ${updateError.message}`);
    }

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ö–æ–¥–∞:", error);
    showStatus(error.message, true);
    choicesMade = false;
    toggleChoiceButtons(true);
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
function determineWinner(p1, p2) {
  if (p1 === p2) return "–ù–∏—á—å—è!";
  const rules = { –∫–∞–º–µ–Ω—å: "–Ω–æ–∂–Ω–∏—Ü—ã", –Ω–æ–∂–Ω–∏—Ü—ã: "–±—É–º–∞–≥–∞", –±—É–º–∞–≥–∞: "–∫–∞–º–µ–Ω—å" };
  const player1Wins = rules[p1] === p2;
  
  if (isPlayer1) {
    return player1Wins ? "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ" : "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢";
  } else {
    return player1Wins ? "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢" : "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ";
  }
}

// –°–±—Ä–æ—Å —Ä–∞—É–Ω–¥–∞
async function resetRound() {
  if (!currentRoom) return;

  try {
    await supabaseClient
      .from("games")
      .update({ 
        player1_choice: null, 
        player2_choice: null, 
        status: "ready" 
      })
      .eq("room_id", currentRoom);

    choicesMade = false;
    toggleChoiceButtons(true);
    showStatus("–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...");
    
    setTimeout(() => {
      showStatus("–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä!");
    }, 1000);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã:", error);
    showStatus("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–∞—É–Ω–¥–∞", true);
  }
}

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function subscribeToUpdates() {
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  if (channel) {
    supabaseClient.removeChannel(channel);
  }

  channel = supabaseClient
    .channel(`game-updates-${currentRoom}`)
    .on(
      "postgres_changes",
      {
        event: "UPDATE",
        schema: "public",
        table: "games",
        filter: `room_id=eq.${currentRoom}`
      },
      (payload) => {
        const { player1_choice, player2_choice, player_count, status } = payload.new;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
        if (player_count === 2 && status === "ready") {
          showStatus("–û–±–∞ –∏–≥—Ä–æ–∫–∞ –≥–æ—Ç–æ–≤—ã! –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä!");
          toggleChoiceButtons(true);
        } else if (player_count === 1) {
          showStatus("–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...");
          toggleChoiceButtons(false);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞
        if (player1_choice && player2_choice) {
          const result = determineWinner(player1_choice, player2_choice);
          showStatus(`${result} (–í—ã: ${isPlayer1 ? player1_choice : player2_choice}, –û–ø–ø–æ–Ω–µ–Ω—Ç: ${isPlayer1 ? player2_choice : player1_choice})`);
          
          toggleChoiceButtons(false);
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            resetRound();
          }, 4000);
        }
      }
    )
    .on(
      "postgres_changes",
      {
        event: "DELETE",
        schema: "public",
        table: "games",
        filter: `room_id=eq.${currentRoom}`
      },
      () => {
        showStatus("–ò–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", true);
        cleanup();
      }
    )
    .subscribe((status) => {
      if (status === "SUBSCRIBED") {
        console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∏–≥—Ä–µ");
      } else if (status === "CHANNEL_ERROR") {
        showStatus("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.", true);
      }
    });

  return channel;
}

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
function cleanup() {
  if (channel) {
    supabaseClient.removeChannel(channel);
    channel = null;
  }
  currentRoom = null;
  isPlayer1 = false;
  gameInProgress = false;
  choicesMade = false;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
  cleanup();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('visibilitychange', () => {
  if (document.hidden && currentRoom) {
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ - –º–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.log("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞");
  } else if (!document.hidden && currentRoom) {
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞ - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.log("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞");
  }
});
