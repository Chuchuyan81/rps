/**
 * Service Worker –¥–ª—è –∏–≥—Ä—ã "–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞"
 * –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º PWA 2024-2025
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, Background Sync, Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */

const CACHE_NAME = 'rps-game-v2.0.0';
const STATIC_CACHE = 'rps-static-v2.0.0';
const DYNAMIC_CACHE = 'rps-dynamic-v2.0.0';
const IMAGE_CACHE = 'rps-images-v2.0.0';

const STATIC_URLS = [
  '/',
  '/index.html',
  '/script.js',
  '/style.css',
  '/manifest.json',
  '/debug.html',
  '/test-room-logic.html',
  '/icons/icon-192x192.png',
  '/icons/icon-512x512.png'
];

const DYNAMIC_URLS = [
  // Supabase –∏ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã
  'https://unpkg.com/@supabase/supabase-js@2'
];

// –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CACHE_STRATEGIES = {
  CACHE_FIRST: 'cache-first',
  NETWORK_FIRST: 'network-first',
  STALE_WHILE_REVALIDATE: 'stale-while-revalidate',
  CACHE_ONLY: 'cache-only',
  NETWORK_ONLY: 'network-only'
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', (event) => {
  console.log('üîß Service Worker v2.0.0: –£—Å—Ç–∞–Ω–æ–≤–∫–∞');
  
  event.waitUntil(
    Promise.all([
      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
      caches.open(STATIC_CACHE).then(cache => {
        console.log('üì¶ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤');
        return cache.addAll(STATIC_URLS);
      }),
      
      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
      caches.open(DYNAMIC_CACHE).then(cache => {
        console.log('üåê –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤');
        return cache.addAll(DYNAMIC_URLS);
      })
    ])
    .then(() => {
      console.log('‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ SW
      return self.skipWaiting();
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    })
  );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', (event) => {
  console.log('üöÄ Service Worker v2.0.0: –ê–∫—Ç–∏–≤–∞—Ü–∏—è');
  
  event.waitUntil(
    Promise.all([
      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–µ–π
      caches.keys().then(cacheNames => {
        return Promise.all(
          cacheNames.map(cacheName => {
            if (cacheName !== STATIC_CACHE && 
                cacheName !== DYNAMIC_CACHE && 
                cacheName !== IMAGE_CACHE) {
              console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      }),
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
      self.clients.claim()
    ])
    .then(() => {
      console.log('‚úÖ Service Worker v2.0.0 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    })
  );
});

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', (event) => {
  const request = event.request;
  const url = new URL(request.url);
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å—ã –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ URL
  if (request.method !== 'GET' || 
      url.pathname.startsWith('/api/') ||
      url.hostname.includes('supabase.co')) {
    return;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  let strategy = getStrategyForRequest(request);
  
  event.respondWith(
    handleRequest(request, strategy)
  );
});

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 */
function getStrategyForRequest(request) {
  const url = new URL(request.url);
  
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã - cache first
  if (STATIC_URLS.includes(url.pathname)) {
    return CACHE_STRATEGIES.CACHE_FIRST;
  }
  
  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - stale while revalidate
  if (request.destination === 'image') {
    return CACHE_STRATEGIES.STALE_WHILE_REVALIDATE;
  }
  
  // API –∑–∞–ø—Ä–æ—Å—ã - network first
  if (url.pathname.startsWith('/api/')) {
    return CACHE_STRATEGIES.NETWORK_FIRST;
  }
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã - stale while revalidate
  return CACHE_STRATEGIES.STALE_WHILE_REVALIDATE;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
 */
async function handleRequest(request, strategy) {
  try {
    switch (strategy) {
      case CACHE_STRATEGIES.CACHE_FIRST:
        return await cacheFirst(request);
      case CACHE_STRATEGIES.NETWORK_FIRST:
        return await networkFirst(request);
      case CACHE_STRATEGIES.STALE_WHILE_REVALIDATE:
        return await staleWhileRevalidate(request);
      default:
        return await staleWhileRevalidate(request);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return await handleOffline(request);
  }
}

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è Cache First
 */
async function cacheFirst(request) {
  const cachedResponse = await caches.match(request);
  
  if (cachedResponse) {
    console.log('üì¶ –ò–∑ –∫—ç—à–∞:', request.url);
    return cachedResponse;
  }
  
  const networkResponse = await fetch(request);
  
  if (networkResponse.ok) {
    const cache = await caches.open(STATIC_CACHE);
    cache.put(request, networkResponse.clone());
  }
  
  return networkResponse;
}

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è Network First
 */
async function networkFirst(request) {
  try {
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.log('üåê –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –∫—ç—à:', request.url);
    const cachedResponse = await caches.match(request);
    
    if (cachedResponse) {
      return cachedResponse;
    }
    
    throw error;
  }
}

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è Stale While Revalidate
 */
async function staleWhileRevalidate(request) {
  const cachedResponse = await caches.match(request);
  
  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
  const updateCache = async () => {
    try {
      const networkResponse = await fetch(request);
      
      if (networkResponse.ok) {
        const cache = await caches.open(
          request.destination === 'image' ? IMAGE_CACHE : DYNAMIC_CACHE
        );
        cache.put(request, networkResponse.clone());
      }
    } catch (error) {
      console.log('üîÑ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error);
    }
  };
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
  updateCache();
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
  if (cachedResponse) {
    console.log('üì¶ Stale-while-revalidate:', request.url);
    return cachedResponse;
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞, –∂–¥–µ–º —Å–µ—Ç–µ–≤–æ–π –æ—Ç–≤–µ—Ç
  return await fetch(request);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
 */
async function handleOffline(request) {
  // –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  if (request.mode === 'navigate') {
    const cachedResponse = await caches.match('/index.html');
    if (cachedResponse) {
      return cachedResponse;
    }
  }
  
  // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
  if (request.destination === 'image') {
    return new Response(
      '<svg xmlns="http://www.w3.org/2000/svg" width="200" height="200"><rect width="200" height="200" fill="#f0f0f0"/><text x="100" y="100" text-anchor="middle" fill="#999">–û—Ñ–ª–∞–π–Ω</text></svg>',
      { headers: { 'Content-Type': 'image/svg+xml' } }
    );
  }
  
  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
  throw new Error('–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ñ–ª–∞–π–Ω');
}

// Background Sync –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
self.addEventListener('sync', (event) => {
  console.log('üîÑ Background Sync:', event.tag);
  
  if (event.tag === 'background-sync') {
    event.waitUntil(
      handleBackgroundSync()
    );
  }
  
  if (event.tag === 'game-moves-sync') {
    event.waitUntil(
      syncGameMoves()
    );
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
async function handleBackgroundSync() {
  try {
    console.log('üì° –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º IndexedDB –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    const db = await openDB();
    const pendingActions = await getPendingActions(db);
    
    for (const action of pendingActions) {
      try {
        await processPendingAction(action);
        await removePendingAction(db, action.id);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:', error);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Ö–æ–¥–æ–≤
 */
async function syncGameMoves() {
  try {
    console.log('üéÆ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—ã–µ —Ö–æ–¥—ã');
    
    // –õ–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ö–æ–¥–æ–≤ –≤ –∏–≥—Ä–µ
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤—ã—Ö —Ö–æ–¥–æ–≤:', error);
  }
}

// Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
self.addEventListener('push', (event) => {
  console.log('üì± Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
  
  let notificationData = {
    title: '–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞',
    body: '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä—ã!',
    icon: '/icons/icon-192x192.png',
    badge: '/icons/icon-72x72.png',
    tag: 'rps-notification',
    renotify: true,
    requireInteraction: false,
    actions: [
      {
        action: 'open',
        title: '–û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É',
        icon: '/icons/icon-96x96.png'
      },
      {
        action: 'close',
        title: '–ó–∞–∫—Ä—ã—Ç—å',
        icon: '/icons/icon-96x96.png'
      }
    ],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 'rps-notification'
    }
  };
  
  // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (event.data) {
    try {
      const serverData = event.data.json();
      notificationData = { ...notificationData, ...serverData };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ push –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }
  
  event.waitUntil(
    self.registration.showNotification(notificationData.title, notificationData)
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
self.addEventListener('notificationclick', (event) => {
  console.log('üîî –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é:', event.action);
  
  event.notification.close();
  
  if (event.action === 'open' || !event.action) {
    event.waitUntil(
      clients.openWindow('/')
    );
  }
});

// –í–µ–±-—à–∞—Ä–∏–Ω–≥ (Web Share Target API)
self.addEventListener('message', (event) => {
  console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', event.data);
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('‚è≠Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SW');
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'GET_VERSION') {
    event.ports[0].postMessage({
      version: CACHE_NAME,
      timestamp: Date.now()
    });
  }
  
  if (event.data && event.data.type === 'CLEAR_CACHE') {
    event.waitUntil(
      clearAllCaches()
    );
  }
});

/**
 * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π
 */
async function clearAllCaches() {
  try {
    const cacheNames = await caches.keys();
    await Promise.all(
      cacheNames.map(cacheName => caches.delete(cacheName))
    );
    console.log('üßπ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π:', error);
  }
}

// Utility —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IndexedDB
async function openDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open('rps-offline-db', 1);
    
    request.onerror = () => reject(request.error);
    request.onsuccess = () => resolve(request.result);
    
    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      if (!db.objectStoreNames.contains('pendingActions')) {
        db.createObjectStore('pendingActions', { keyPath: 'id' });
      }
    };
  });
}

async function getPendingActions(db) {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(['pendingActions'], 'readonly');
    const store = transaction.objectStore('pendingActions');
    const request = store.getAll();
    
    request.onerror = () => reject(request.error);
    request.onsuccess = () => resolve(request.result);
  });
}

async function processPendingAction(action) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  console.log('‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', action);
}

async function removePendingAction(db, id) {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(['pendingActions'], 'readwrite');
    const store = transaction.objectStore('pendingActions');
    const request = store.delete(id);
    
    request.onerror = () => reject(request.error);
    request.onsuccess = () => resolve();
  });
} 